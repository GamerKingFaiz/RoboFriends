{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","randomHash","react_default","a","createElement","className","src","concat","alt","id","href","CardList","robots","map","user","components_Card","key","username","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","props","children","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de50f251.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, randomHash }) => {\r\n    return (\r\n        <div className=\"minW tc bg-light-green br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${randomHash}?size=200x200`} alt='robots' />\r\n            <div id=\"info\">\r\n                <h2>{name}</h2>\r\n                <a href={`mailto:${email}`}>{email}</a>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport './Card.css';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div id=\"cardHolder\">\r\n            {\r\n                /* Function that maps each robot onto a card */\r\n                robots.map((user) => {\r\n                    return (\r\n                        <Card\r\n                            key={user.id} // Key prop is suggested for React iterator\r\n                            randomHash={user.username}\r\n                            name={user.name}\r\n                            email={user.email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className=\"pa3 tc\">\r\n            <input\r\n                type=\"search\"\r\n                placeholder=\"Search robot names\"\r\n                className=\"pa3 ba b--green bg-lightest-blue br-pill tc\"\r\n                id=\"searchBox\"\r\n                onChange={ searchChange }\r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops! Something went wrong...</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n// import Scroll from './Scroll';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =  (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n        if (isPending) {\r\n            return <h1 className=\"tc\">Loading...</h1>\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <h1 className=\"tc f1\">RoboFriends</h1>\r\n                    <SearchBox searchChange={ onSearchChange }/>\r\n                    <hr />\r\n                    {/* <Scroll> */}\r\n                    <ErrorBoundary>\r\n                        <CardList robots={ filteredRobots }/>\r\n                    </ErrorBoundary>\r\n                    {/* </Scroll> */}\r\n                </div>\r\n                \r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'; // Redux logging program\nimport thunkMiddleware from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons'; // CSS Library\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={ store }>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}